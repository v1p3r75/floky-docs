{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#what-is-floky","title":"What is Floky ?","text":"<p>Floky is a MVC (Model-View-Controller) framework for developing web applications in PHP. It provides an organized structure for your code, powerful features, and flexibility to create robust and scalable web applications.</p>"},{"location":"#main-features","title":"Main Features","text":"<ul> <li>MVC architecture: Organize your code in a clean and modular way.</li> <li>Powerful Routing: Manage URLs flexibly to direct requests to the appropriate controllers.</li> <li>Database Management: Facilitate interaction with databases thanks to NexaORM (a powerful and easy to use flexible new generation ORM in hand).</li> <li>Security: Integrate security mechanisms to protect your application against common vulnerabilities.</li> <li>Flexible View: Use the BladeOne template engine to design rich and dynamic views.</li> <li>Dependency Container: Use a dependency container to manage your application's services efficiently.</li> <li>More Elegant Tests: Take advantage of Pest, an elegant testing framework for PHP, to write clean, readable and expressive tests for your application.</li> <li>Reusable Components: Take advantage of libraries and tools to accelerate development.</li> <li>Complete Documentation: A detailed guide to help you get started quickly.</li> </ul>"},{"location":"#why-floky","title":"Why Floky ?","text":"<p>The idea behind Floky is not to reinvent the wheel, but to provide a set of well-designed, easy-to-use tools for smaller projects. We sought to simplify development by avoiding unnecessary complexity, while still providing flexibility to create quality web applications. Floky was designed to meet a fundamental need: to allow developers to quickly start a project without having to spend weeks understanding how many tools work. We understand that sometimes you just need a lightweight and efficient tool to bring your ideas to life without being overwhelmed by a multitude of unnecessary features.</p> <p>Here's why Floky may be the perfect choice for your next project:</p> <ul> <li>Quick Start</li> </ul> <p>With Floky, you can quickly set up your app structure and start writing working code in no time. Our simple, modular architecture allows you to focus on the logic of your application without having to worry about complex configurations.</p> <ul> <li>Less Learning Curve</li> </ul> <p>Unlike many massive frameworks, Floky is designed to be intuitive. You don't need to spend hours understanding documentation or learning abstract concepts. Getting to grips with things like routes, middleware, and other key Floky concepts is a quick and seamless process.</p> <ul> <li>Lightweight and Adaptable</li> </ul> <p>Floky is a lightweight framework that doesn't overload your project with unnecessary features. It is ideal for smaller projects, providing you with the essential tools to create effective web applications.</p> <p>Whether your project is a small website, a simple web application, or a prototype, Floky can help you move forward quickly without sacrificing quality. It provides the flexibility you need to focus on what really matters: bringing your project to life.</p> <p>So why wait? Try Floky today and start developing your ideas without unnecessary hassle and complications.</p>"},{"location":"#installation","title":"Installation","text":"<ul> <li> <p>Make sure you have Composer installed on your system. If not, you can download and install it from the official website of Composer.</p> </li> <li> <p>Run the Composer command to create and install the application dependencies:</p> Bash<pre><code>composer create-project v1p3r75/floky\n</code></pre> </li> <li> <p>You will now have the most recent version of your framework and all dependencies correctly installed.</p> </li> </ul>"},{"location":"#contributors","title":"Contributors","text":"<p>Development of Floky is currently underway, and we welcome any contribution from the community.</p> <p>The core development team currently includes the following contributors:</p> <ul> <li>Fortunatus KIDJE (v1p3r75) - Founder and lead developer</li> <li>Kabirou ALASSANE (BlakvGhost) - Associate developer</li> </ul> <p>We are excited to grow this project and add new features to meet the needs of the PHP developer community. Join us in this adventure and help make Floky an even lighter and more powerful tool for developing web applications in PHP.</p>"},{"location":"#licence","title":"Licence","text":"<p>This project is licensed under the MIT.</p>"},{"location":"cli/add-new-commands/","title":"Add Your Own Commands","text":""},{"location":"cli/cli-commands/","title":"Commands","text":""},{"location":"database/entities/","title":"Entities","text":""},{"location":"database/migrations/","title":"Migrations","text":""},{"location":"database/models/","title":"Models","text":""},{"location":"database/seeders/","title":"Seeders","text":""},{"location":"get-started/","title":"Introduction","text":""},{"location":"get-started/#what-is-floky","title":"What is Floky ?","text":"<p>Floky is a MVC (Model-View-Controller) framework for developing web applications in PHP. It provides an organized structure for your code, powerful features, and flexibility to create robust and scalable web applications.</p>"},{"location":"get-started/#main-features","title":"Main Features","text":"<ul> <li>MVC architecture: Organize your code in a clean and modular way.</li> <li>Powerful Routing: Manage URLs flexibly to direct requests to the appropriate controllers.</li> <li>Database Management: Facilitate interaction with databases thanks to NexaORM (a powerful and easy to use flexible new generation ORM in hand).</li> <li>Security: Integrate security mechanisms to protect your application against common vulnerabilities.</li> <li>Flexible View: Use the BladeOne template engine to design rich and dynamic views.</li> <li>Dependency Container: Use a dependency container to manage your application's services efficiently.</li> <li>More Elegant Tests: Take advantage of Pest, an elegant testing framework for PHP, to write clean, readable and expressive tests for your application.</li> <li>Reusable Components: Take advantage of libraries and tools to accelerate development.</li> <li>Complete Documentation: A detailed guide to help you get started quickly.</li> </ul>"},{"location":"get-started/#why-floky","title":"Why Floky ?","text":"<p>The idea behind Floky is not to reinvent the wheel, but to provide a set of well-designed, easy-to-use tools for smaller projects. We sought to simplify development by avoiding unnecessary complexity, while still providing flexibility to create quality web applications. Floky was designed to meet a fundamental need: to allow developers to quickly start a project without having to spend weeks understanding how many tools work. We understand that sometimes you just need a lightweight and efficient tool to bring your ideas to life without being overwhelmed by a multitude of unnecessary features.</p> <p>Here's why Floky may be the perfect choice for your next project:</p> <ul> <li>Quick Start</li> </ul> <p>With Floky, you can quickly set up your app structure and start writing working code in no time. Our simple, modular architecture allows you to focus on the logic of your application without having to worry about complex configurations.</p> <ul> <li>Less Learning Curve</li> </ul> <p>Unlike many massive frameworks, Floky is designed to be intuitive. You don't need to spend hours understanding documentation or learning abstract concepts. Getting to grips with things like routes, middleware, and other key Floky concepts is a quick and seamless process.</p> <ul> <li>Lightweight and Adaptable</li> </ul> <p>Floky is a lightweight framework that doesn't overload your project with unnecessary features. It is ideal for smaller projects, providing you with the essential tools to create effective web applications.</p> <p>Whether your project is a small website, a simple web application, or a prototype, Floky can help you move forward quickly without sacrificing quality. It provides the flexibility you need to focus on what really matters: bringing your project to life.</p> <p>So why wait? Try Floky today and start developing your ideas without unnecessary hassle and complications.</p>"},{"location":"get-started/#installation","title":"Installation","text":"<ul> <li> <p>Make sure you have Composer installed on your system. If not, you can download and install it from the official website of Composer.</p> </li> <li> <p>Run the Composer command to create and install the application dependencies:</p> Bash<pre><code>composer create-project v1p3r75/floky\n</code></pre> </li> <li> <p>You will now have the most recent version of your framework and all dependencies correctly installed.</p> </li> </ul>"},{"location":"get-started/#contributors","title":"Contributors","text":"<p>Development of Floky is currently underway, and we welcome any contribution from the community.</p> <p>The core development team currently includes the following contributors:</p> <ul> <li>Fortunatus KIDJE (v1p3r75) - Founder and lead developer</li> <li>Kabirou ALASSANE (BlakvGhost) - Associate developer</li> </ul> <p>We are excited to grow this project and add new features to meet the needs of the PHP developer community. Join us in this adventure and help make Floky an even lighter and more powerful tool for developing web applications in PHP.</p>"},{"location":"get-started/#licence","title":"Licence","text":"<p>This project is licensed under the MIT.</p>"},{"location":"get-started/configuration/","title":"Configuration","text":"<p>The configuration of your application is in the <code>.env</code> file (Rename the <code>.env.example</code> file to <code>.env</code>). Here you can define database settings, secret keys, and other configurations specific to your application.</p>"},{"location":"get-started/configuration/#project-structure","title":"Project Structure","text":"<ul> <li><code>public/</code>: The entry point of your application, the files accessible from the browser.</li> <li><code>src/</code>: The main directory of your source code.<ul> <li><code>app/</code>: Contains the controllers, entities, models, middleware, services, and other components of your application.</li> <li><code>config/</code>: Contains the configuration files of your application.</li> <li><code>database/</code>: Contains migration files, seeders, ...</li> <li><code>routes/</code>: The route definition files for your application.</li> <li><code>storage/</code>: Files generated by the application, such as logs, sessions, etc.</li> <li><code>views/</code>: Contains the template files for generating views.</li> <li>... (other directories and files specific to your project)</li> </ul> </li> <li><code>test/</code>: Contains the test files for the application.</li> </ul>"},{"location":"get-started/configuration/#how-to-launch-the-application","title":"How to Launch the Application","text":"<p>Once you have Floky installed, you are ready to launch your application. Follow these simple steps to start your project:</p>"},{"location":"get-started/configuration/#use-php-server","title":"Use PHP server","text":"<ol> <li> <p>Environment Configuration: Before launching your application, make sure you have correctly configured the environment. Make sure settings, such as database connection and other options specific to your project, are set correctly.</p> </li> <li> <p>Database Migrations: If your application uses a database, be sure to perform the necessary migrations to create the database tables and schemas. You can use specific commands provided by the framework to perform these migrations :</p> Prepare all migrations<pre><code>php floky make:migrations\n</code></pre> Run all migrations<pre><code>php floky run:migrations\n</code></pre> </li> <li> <p>Creating Routes: Configure your routes in the <code>src/routes/</code> directory. This is where you specify how URLs should be handled by your application. You can define controllers, actions and parameters for each route.</p> </li> <li> <p>Creating Controllers and Views: Develop controllers and views to manage different parts of your application. Controllers define the logic for handling requests, while views define the presentation of the data.</p> </li> <li> <p>Launching the Development Server: Use the specific command to launch the integrated development server of your framework. This will allow you to test your application locally.</p> Bash<pre><code>php floky serve --port 8080\n</code></pre> </li> <li> <p>This command will launch the development server at http://localhost:8080, and you will be able to access your application from your browser.</p> </li> <li> <p>You will see this welcome page :</p> </li> </ol> <p></p>"},{"location":"get-started/configuration/#use-a-local-web-server","title":"Use a Local Web Server","text":"<ul> <li> <p>Launching the Local Web Server: Start your local web server (for example, Apache or Nginx) and configure it to serve your application from the <code>public</code> directory of your project.</p> </li> <li> <p>Access to the Application: Open your web browser and navigate to the appropriate URL for your local web server. You will be able to see your application running.</p> </li> </ul>"},{"location":"get-started/your-first-app/","title":"Your first app","text":""},{"location":"http/controllers/","title":"Controllers","text":"<p>Controllers are a fundamental part of the Floky MVC architecture. They handle incoming HTTP requests, interact with models to retrieve or manipulate data, and prepare the data for presentation in views. Controllers provide a layer of abstraction between the routes and the underlying application logic.</p>"},{"location":"http/controllers/#creating-controllers","title":"Creating Controllers","text":"<p>Floky provides a convenient command for quickly creating controllers. This command generates a PHP controller file within the <code>app/Http/Controllers</code> directory.</p> <p>Example:</p> Create a new controller<pre><code>php floky make:controller WelcomeController\n</code></pre> <p>This command will create a WelcomeController.php file inside the <code>app/Http/Controllers</code> directory. The generated file will contain the following boilerplate code:</p> PHP<pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Floky\\Http\\Controllers\\Controller;\n\nclass WelcomeController extends Controller\n{\n    // ...\n}\n</code></pre>"},{"location":"http/controllers/#anatomy-of-a-controller","title":"Anatomy of a Controller","text":"<p>A typical Floky controller consists of the following elements:</p> <ul> <li>Namespace: Controllers are typically placed within a namespace that reflects their location within the application. In the example provided, the controller resides in the <code>App\\Http\\Controllers</code> namespace.</li> <li>Inheritance: Floky controllers inherit from the <code>Floky\\Http\\Controllers\\Controller</code> class. This base class provides essential functionalities common to all controllers in your application.</li> <li>Request Handling Methods: Controllers define methods to handle different HTTP request types (GET, POST, PUT, etc.). These methods are decorated with the <code>#[Get]</code>, <code>#[Post]</code>, <code>#[Put]</code>, or <code>#[Delete]</code> attributes from the <code>Floky\\Routing\\Attributes</code> namespace. These attributes specify the HTTP method the method handles and allow you to define the route URL and any middleware to be applied before the method execution.</li> <li>Dependency Injection: Controller methods can accept arguments through constructor injection or method injection. A common approach is to inject the <code>Floky\\Http\\Requests\\Request</code> object to access request data.</li> <li>Model Interaction: Controllers often interact with models to retrieve or manipulate data. Models represent the data layer of your application and encapsulate the business logic.</li> <li>View Rendering: Once the controller has processed the request and prepared the data, it returns a view. The view typically represents the user interface (UI) component responsible for presenting the data to the user. The controller uses the <code>view</code> function provided by Floky to render the desired view and pass any necessary data to it.</li> </ul>"},{"location":"http/controllers/#example-controller","title":"Example Controller","text":"PHP<pre><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Floky\\Http\\Controllers\\Controller;\nuse Floky\\Http\\Requests\\Request;\nuse Floky\\Routing\\Attributes\\Get;\n\nclass WelcomeController extends Controller\n{\n\n    #[Get(url: '/welcome', name: 'welcome', middlewares: ['first'])]\n    public function index(Request $request) {\n\n        // Simulate some data fetching\n        $data = ['message' =&gt; 'Welcome to Floky!'];\n\n        return view('welcome', $data);\n    }\n}\n</code></pre> <p>In this example, the <code>WelcomeController</code> has an <code>index</code> method decorated with the <code>#[Get]</code> attribute. This method handles GET requests to the <code>/welcome</code> route. The <code>middlewares</code> option specifies that the <code>first</code> middleware should be executed before the controller method. The <code>index</code> method receives a <code>Request</code> object as an argument, allowing it to access request data. Here, the controller simulates fetching some data and then returns the <code>welcome</code> view, passing the <code>$data</code> array containing the welcome message.</p>"},{"location":"http/controllers/#key-points","title":"Key Points","text":"<ul> <li>Controllers are responsible for handling HTTP requests, interacting with models, and preparing data for views.</li> <li>Floky controllers inherit from the <code>Floky\\Http\\Controllers\\Controller</code> class.</li> <li>Request handling methods are decorated with routing attributes to define the HTTP method and route URL.</li> <li>Controllers can leverage dependency injection to access request data and other dependencies.</li> <li>Controllers interact with models to manage application data.</li> <li>Controllers return views to render the UI based on processed data.</li> </ul>"},{"location":"http/custom_request/","title":"Custom Request","text":""},{"location":"http/middleware/","title":"Middleware","text":""},{"location":"http/requests/","title":"Requests","text":""},{"location":"http/resources/","title":"Resources","text":""},{"location":"http/response/","title":"Response","text":""},{"location":"http/routing/","title":"Routing","text":""},{"location":"http/views/","title":"View","text":""},{"location":"others/collections/","title":"Collections","text":""},{"location":"others/contributing/","title":"Contributing","text":"<p>We appreciate your interest in contributing to Floky! This page outlines the guidelines for contributing code, documentation, and other improvements to the project.</p>"},{"location":"others/contributing/#how-to-contribute","title":"How to Contribute","text":"<ul> <li>Issues: Report bugs or request features by creating issues on the Floky GitHub repository: https://github.com/v1p3r75/Floky/issues. </li> <li>Pull Requests: Fork the Floky repository, make your changes, and submit a pull request for review. Ensure your pull request adheres to the coding style and includes clear documentation for any new features.</li> </ul> <p>Coding Standards:</p> <ul> <li>Follow PSR-2 coding standards for consistent and readable code.</li> <li>Use meaningful variable and function names.</li> <li>Add comments to explain complex logic or non-obvious code sections.</li> </ul> <p>Documentation:</p> <ul> <li>Improve existing documentation by fixing errors or adding clarity.</li> <li>Contribute new documentation for features or functionalities you introduce.</li> <li>Use clear and concise language with proper grammar.</li> </ul>"},{"location":"others/contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the Floky Repository: Create a fork of the Floky repository on GitHub.</li> <li>Clone your Fork: Clone your forked repository to your local machine.</li> <li>Create a Branch: Create a new branch for your specific contribution.</li> <li>Make Changes: Make your changes to the code or documentation.</li> <li>Commit Changes: Commit your changes with clear commit messages.</li> <li>Push Changes: Push your changes to your forked repository on GitHub.</li> <li>Create a Pull Request: Create a pull request from your branch to the main Floky repository.</li> </ol>"},{"location":"others/contributing/#additional-tips","title":"Additional Tips","text":"<ul> <li>Unit Tests: Consider adding unit tests for any new code you introduce.</li> <li>Code Reviews: Participate in code reviews for other pull requests to ensure overall code quality.</li> <li>Stay Updated: Follow the Floky project for updates and announcements.</li> </ul>"},{"location":"others/contributing/#we-welcome-your-contributions","title":"We welcome your contributions!","text":"<p>By following these guidelines, you can help us make Floky a better and more valuable project for everyone. If you have any questions or need assistance, feel free to reach out to the project maintainers on the Floky GitHub repository.</p>"},{"location":"others/exceptions/","title":"Exceptions","text":""},{"location":"others/facades/","title":"Facades","text":""},{"location":"others/helpers/","title":"Helpers","text":""},{"location":"others/services/","title":"Services","text":""}]}